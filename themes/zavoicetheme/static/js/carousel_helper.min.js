(function () {
	"use strict";
	BX.namespace("BX.Landing.SliderHelper");
	BX.Landing.SliderHelper.activeClass = "slick-initialized";
	BX.Landing.SliderHelper.init = function (e, i) {
		i = i ? i : "init";
		var l = BX.Landing.SliderHelper.makeCarouselRelativeSelector(e);
		var r = e.block.querySelectorAll(l);
		if (r.length > 0 && !BX.Landing.SliderHelper.isSliderActive(r)) {
			BX.Landing.SliderHelper.initBase(l);
			BX.Landing.SliderHelper.goToSlide(e, i)
		}
	};
	BX.Landing.SliderHelper.destroy = function (e) {
		var i = BX.Landing.SliderHelper.makeCarouselRelativeSelector(e);
		var l = e.block.querySelectorAll(i);
		if (l.length > 0 && BX.Landing.SliderHelper.isSliderActive(l)) {
			e.block.slickCurrentSlide = $(i).slick("slickCurrentSlide");
			$(i).slick("unslick")
		}
	};
	BX.Landing.SliderHelper.isSliderActive = function (e) {
		var i = false;
		Object.keys(e).forEach(function (l) {
			if (BX.hasClass(e[l], BX.Landing.SliderHelper.activeClass)) {
				i = true
			}
		});
		return i
	};
	BX.Landing.SliderHelper.initBase = function (e) {
		$.HSCore.components.HSCarousel.init(e, {
			accessibility: false
		});
		if (BX.Landing.getMode() == "edit") {
			$(e).slick("slickSetOption", "infinite", false, true)
		}
		$(e).on("afterChange", function (e, i, l) {
			var e = new CustomEvent("scroll");
			window.dispatchEvent(e)
		})
	};
	BX.Landing.SliderHelper.makeCarouselRelativeSelector = function (e, i) {
		if (e.block.carouselRelativeSelector) {
			return e.block.carouselRelativeSelector
		}
		i = i || "js-carousel";
		var l = [];
		if (e.block) {
			var r = [];
			if (e.card) {
				r = e.block.querySelectorAll("." + e.card.className.split(/\s+/).join("."))
			} else if (e.node) {
				r = e.node
			} else if (e.data && e.data.selector) {
				r = e.block.querySelectorAll(e.data.selector.split("@")[0])
			}
			if (!BX.type.isArray(r)) {
				r = [r]
			}
			r.forEach(function (e) {
				var r = BX.findParent(e, {
						className: i
					}),
					n = "";
				if (r) {
					r.classList.forEach(function (e) {
						if (e.indexOf("slick-") == -1) {
							n += "." + e
						}
					});
					if (l[l.length - 1] != n) {
						l.push(n)
					}
				}
			})
		}
		if (l.length == 0) {
			l = ["." + i]
		}
		l.forEach(function (i, r) {
			l[r] = e.makeRelativeSelector(i)
		});
		e.block.carouselRelativeSelector = l.join(",");
		return e.block.carouselRelativeSelector
	};
	BX.Landing.SliderHelper.goToSlide = function (e, i) {
		if (!i) {
			return
		}
		var l = BX.Landing.SliderHelper.makeCarouselRelativeSelector(e);
		var r = parseInt(e.block.slickCurrentSlide);
		if (e.card) {
			var n = parseInt(e.card.dataset.slickIndex)
		}
		switch (i) {
		case "add":
			BX.Landing.SliderHelper.goToNewSlideAfterAdd(l, r, n);
			break;
		case "remove":
			BX.Landing.SliderHelper.goToNewSlideAfterRemove(l, r, n);
			break;
		case "update":
			BX.Landing.SliderHelper.goToSlideAfterUpdate(l, r);
			break;
		default:
		}
	};
	BX.Landing.SliderHelper.goToNewSlideAfterAdd = function (e, i, l) {
		if (BX.type.isNumber(l) && BX.type.isNumber(i)) {
			var r = $(e).slick("slickGetOption", "slidesToShow");
			r = r === true ? 1 : r;
			if (l - i >= r) {
				$(e).slick("slickGoTo", i, true);
				$(e).slick("slickGoTo", i + 1, false)
			} else {
				$(e).slick("slickGoTo", i, true)
			}
		}
	};
	BX.Landing.SliderHelper.goToNewSlideAfterRemove = function (e, i, l) {
		if (BX.type.isNumber(l) && BX.type.isNumber(i)) {
			$(e).slick("slickGoTo", Math.min(i, l), true)
		}
	};
	BX.Landing.SliderHelper.goToSlideAfterUpdate = function (e, i) {
		if (BX.type.isNumber(i)) {
			$(e).slick("slickGoTo", i, true)
		}
	}
})();